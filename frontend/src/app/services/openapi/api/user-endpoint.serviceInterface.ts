/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApplicationUserDto } from '../model/models';
import { ApplicationUserResponse } from '../model/models';
import { PageApplicationUserResponse } from '../model/models';
import { UserCreateRequest } from '../model/models';
import { UserUpdateInfoRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface UserEndpointServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * 
     * @param token 
     */
    activateAccount(token: string, extraHttpRequestParams?: any): Observable<{ [key: string]: string; }>;

    /**
     * 
     * 
     */
    getUser(extraHttpRequestParams?: any): Observable<ApplicationUserResponse>;

    /**
     * 
     * 
     * @param userCreateRequest 
     */
    register(userCreateRequest: UserCreateRequest, extraHttpRequestParams?: any): Observable<object>;

    /**
     * 
     * 
     * @param firstName 
     * @param familyName 
     * @param email 
     * @param isLocked 
     * @param page 
     * @param size 
     */
    searchUsers(firstName?: string, familyName?: string, email?: string, isLocked?: boolean, page?: number, size?: number, extraHttpRequestParams?: any): Observable<PageApplicationUserResponse>;

    /**
     * 
     * 
     * @param email 
     */
    sendEmailForPasswordChange(email: string, extraHttpRequestParams?: any): Observable<{ [key: string]: string; }>;

    /**
     * 
     * 
     * @param email 
     */
    sendEmailForPasswordReset(email: string, extraHttpRequestParams?: any): Observable<{ [key: string]: string; }>;

    /**
     * 
     * 
     * @param token 
     * @param newPassword 
     * @param currentPassword 
     */
    setNewPasswordWithValidToken(token: string, newPassword: string, currentPassword?: string, extraHttpRequestParams?: any): Observable<{ [key: string]: string; }>;

    /**
     * 
     * 
     * @param token 
     */
    updateUserEmailWithValidToken(token: string, extraHttpRequestParams?: any): Observable<object>;

    /**
     * 
     * 
     * @param userUpdateInfoRequest 
     */
    updateUserInfo(userUpdateInfoRequest: UserUpdateInfoRequest, extraHttpRequestParams?: any): Observable<ApplicationUserResponse>;

    /**
     * 
     * 
     * @param applicationUserDto 
     */
    updateUserStatusByEmail(applicationUserDto: ApplicationUserDto, extraHttpRequestParams?: any): Observable<ApplicationUserResponse>;

}
