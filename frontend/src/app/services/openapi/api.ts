/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApplicationUserResponse
 */
export interface ApplicationUserResponse {
    /**
     * 
     * @type {number}
     * @memberof ApplicationUserResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationUserResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationUserResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationUserResponse
     */
    'familyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationUserResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationUserResponse
     */
    'accountLocked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationUserResponse
     */
    'isAdmin'?: boolean;
}
/**
 * 
 * @export
 * @interface DetailedMessageDto
 */
export interface DetailedMessageDto {
    /**
     * 
     * @type {number}
     * @memberof DetailedMessageDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DetailedMessageDto
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedMessageDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedMessageDto
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedMessageDto
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface EventResponse
 */
export interface EventResponse {
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventResponse
     */
    'eventType'?: EventResponseEventTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EventResponse
     */
    'duration'?: number;
}

export const EventResponseEventTypeEnum = {
    Concert: 'CONCERT',
    Theater: 'THEATER',
    Play: 'PLAY'
} as const;

export type EventResponseEventTypeEnum = typeof EventResponseEventTypeEnum[keyof typeof EventResponseEventTypeEnum];

/**
 * 
 * @export
 * @interface HallSectorResponse
 */
export interface HallSectorResponse {
    /**
     * 
     * @type {number}
     * @memberof HallSectorResponse
     */
    'id'?: number;
    /**
     * 
     * @type {HallSectorShowResponse}
     * @memberof HallSectorResponse
     */
    'hallSectorShow'?: HallSectorShowResponse;
}
/**
 * 
 * @export
 * @interface HallSectorShowResponse
 */
export interface HallSectorShowResponse {
    /**
     * 
     * @type {number}
     * @memberof HallSectorShowResponse
     */
    'id'?: number;
    /**
     * 
     * @type {ShowResponse}
     * @memberof HallSectorShowResponse
     */
    'show'?: ShowResponse;
    /**
     * 
     * @type {HallSectorResponse}
     * @memberof HallSectorShowResponse
     */
    'sector'?: HallSectorResponse;
    /**
     * 
     * @type {number}
     * @memberof HallSectorShowResponse
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface HallSpotResponse
 */
export interface HallSpotResponse {
    /**
     * 
     * @type {number}
     * @memberof HallSpotResponse
     */
    'id'?: number;
    /**
     * 
     * @type {HallSectorResponse}
     * @memberof HallSpotResponse
     */
    'sector'?: HallSectorResponse;
}
/**
 * 
 * @export
 * @interface InvoiceResponse
 */
export interface InvoiceResponse {
    /**
     * 
     * @type {number}
     * @memberof InvoiceResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponse
     */
    'invoiceType'?: InvoiceResponseInvoiceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InvoiceResponse
     */
    'dateTime'?: string;
}

export const InvoiceResponseInvoiceTypeEnum = {
    Purchase: 'PURCHASE',
    Cancellation: 'CANCELLATION'
} as const;

export type InvoiceResponseInvoiceTypeEnum = typeof InvoiceResponseInvoiceTypeEnum[keyof typeof InvoiceResponseInvoiceTypeEnum];

/**
 * 
 * @export
 * @interface MessageInquiryDto
 */
export interface MessageInquiryDto {
    /**
     * 
     * @type {string}
     * @memberof MessageInquiryDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInquiryDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInquiryDto
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface OrderDetailsResponse
 */
export interface OrderDetailsResponse {
    /**
     * 
     * @type {number}
     * @memberof OrderDetailsResponse
     */
    'id'?: number;
    /**
     * 
     * @type {Array<TicketDetailsResponse>}
     * @memberof OrderDetailsResponse
     */
    'tickets'?: Array<TicketDetailsResponse>;
    /**
     * 
     * @type {ApplicationUserResponse}
     * @memberof OrderDetailsResponse
     */
    'customer'?: ApplicationUserResponse;
    /**
     * 
     * @type {Array<InvoiceResponse>}
     * @memberof OrderDetailsResponse
     */
    'invoices'?: Array<InvoiceResponse>;
}
/**
 * 
 * @export
 * @interface ShowResponse
 */
export interface ShowResponse {
    /**
     * 
     * @type {number}
     * @memberof ShowResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowResponse
     */
    'dateTime'?: string;
    /**
     * 
     * @type {EventResponse}
     * @memberof ShowResponse
     */
    'event'?: EventResponse;
}
/**
 * 
 * @export
 * @interface SimpleMessageDto
 */
export interface SimpleMessageDto {
    /**
     * 
     * @type {number}
     * @memberof SimpleMessageDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SimpleMessageDto
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleMessageDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof SimpleMessageDto
     */
    'summary'?: string;
}
/**
 * 
 * @export
 * @interface TicketDetailsResponse
 */
export interface TicketDetailsResponse {
    /**
     * 
     * @type {number}
     * @memberof TicketDetailsResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TicketDetailsResponse
     */
    'hash'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TicketDetailsResponse
     */
    'reserved'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TicketDetailsResponse
     */
    'valid'?: boolean;
    /**
     * 
     * @type {HallSpotResponse}
     * @memberof TicketDetailsResponse
     */
    'hallSpot'?: HallSpotResponse;
    /**
     * 
     * @type {ShowResponse}
     * @memberof TicketDetailsResponse
     */
    'show'?: ShowResponse;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'familyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserCreateRequest
     */
    'isAdmin'?: boolean;
}
/**
 * 
 * @export
 * @interface UserLoginDto
 */
export interface UserLoginDto {
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserLoginDto
     */
    'password': string;
}

/**
 * CustomHealthEndpointApi - axios parameter creator
 * @export
 */
export const CustomHealthEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preShutdown: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/prepareShutdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomHealthEndpointApi - functional programming interface
 * @export
 */
export const CustomHealthEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomHealthEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHealth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomHealthEndpointApi.getHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async preShutdown(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.preShutdown(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomHealthEndpointApi.preShutdown']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomHealthEndpointApi - factory interface
 * @export
 */
export const CustomHealthEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomHealthEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHealth(options?: any): AxiosPromise<string> {
            return localVarFp.getHealth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        preShutdown(options?: any): AxiosPromise<void> {
            return localVarFp.preShutdown(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomHealthEndpointApi - interface
 * @export
 * @interface CustomHealthEndpointApi
 */
export interface CustomHealthEndpointApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomHealthEndpointApiInterface
     */
    getHealth(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomHealthEndpointApiInterface
     */
    preShutdown(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * CustomHealthEndpointApi - object-oriented interface
 * @export
 * @class CustomHealthEndpointApi
 * @extends {BaseAPI}
 */
export class CustomHealthEndpointApi extends BaseAPI implements CustomHealthEndpointApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomHealthEndpointApi
     */
    public getHealth(options?: RawAxiosRequestConfig) {
        return CustomHealthEndpointApiFp(this.configuration).getHealth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomHealthEndpointApi
     */
    public preShutdown(options?: RawAxiosRequestConfig) {
        return CustomHealthEndpointApiFp(this.configuration).preShutdown(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginEndpointApi - axios parameter creator
 * @export
 */
export const LoginEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLoginDto: UserLoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLoginDto' is not null or undefined
            assertParamExists('login', 'userLoginDto', userLoginDto)
            const localVarPath = `/api/v1/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginEndpointApi - functional programming interface
 * @export
 */
export const LoginEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLoginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginEndpointApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginEndpointApi - factory interface
 * @export
 */
export const LoginEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {UserLoginDto} userLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLoginDto: UserLoginDto, options?: any): AxiosPromise<string> {
            return localVarFp.login(userLoginDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginEndpointApi - interface
 * @export
 * @interface LoginEndpointApi
 */
export interface LoginEndpointApiInterface {
    /**
     * 
     * @param {UserLoginDto} userLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginEndpointApiInterface
     */
    login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * LoginEndpointApi - object-oriented interface
 * @export
 * @class LoginEndpointApi
 * @extends {BaseAPI}
 */
export class LoginEndpointApi extends BaseAPI implements LoginEndpointApiInterface {
    /**
     * 
     * @param {UserLoginDto} userLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginEndpointApi
     */
    public login(userLoginDto: UserLoginDto, options?: RawAxiosRequestConfig) {
        return LoginEndpointApiFp(this.configuration).login(userLoginDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessageEndpointApi - axios parameter creator
 * @export
 */
export const MessageEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Publish a new message
         * @param {MessageInquiryDto} messageInquiryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (messageInquiryDto: MessageInquiryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageInquiryDto' is not null or undefined
            assertParamExists('create', 'messageInquiryDto', messageInquiryDto)
            const localVarPath = `/api/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageInquiryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get detailed information about a specific message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('find', 'id', id)
            const localVarPath = `/api/v1/messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of messages without details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageEndpointApi - functional programming interface
 * @export
 */
export const MessageEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Publish a new message
         * @param {MessageInquiryDto} messageInquiryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(messageInquiryDto: MessageInquiryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedMessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(messageInquiryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageEndpointApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get detailed information about a specific message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedMessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageEndpointApi.find']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of messages without details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SimpleMessageDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageEndpointApi.findAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessageEndpointApi - factory interface
 * @export
 */
export const MessageEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageEndpointApiFp(configuration)
    return {
        /**
         * 
         * @summary Publish a new message
         * @param {MessageInquiryDto} messageInquiryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(messageInquiryDto: MessageInquiryDto, options?: any): AxiosPromise<DetailedMessageDto> {
            return localVarFp.create(messageInquiryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get detailed information about a specific message
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(id: number, options?: any): AxiosPromise<DetailedMessageDto> {
            return localVarFp.find(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of messages without details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: any): AxiosPromise<Array<SimpleMessageDto>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageEndpointApi - interface
 * @export
 * @interface MessageEndpointApi
 */
export interface MessageEndpointApiInterface {
    /**
     * 
     * @summary Publish a new message
     * @param {MessageInquiryDto} messageInquiryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApiInterface
     */
    create(messageInquiryDto: MessageInquiryDto, options?: RawAxiosRequestConfig): AxiosPromise<DetailedMessageDto>;

    /**
     * 
     * @summary Get detailed information about a specific message
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApiInterface
     */
    find(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DetailedMessageDto>;

    /**
     * 
     * @summary Get list of messages without details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApiInterface
     */
    findAll(options?: RawAxiosRequestConfig): AxiosPromise<Array<SimpleMessageDto>>;

}

/**
 * MessageEndpointApi - object-oriented interface
 * @export
 * @class MessageEndpointApi
 * @extends {BaseAPI}
 */
export class MessageEndpointApi extends BaseAPI implements MessageEndpointApiInterface {
    /**
     * 
     * @summary Publish a new message
     * @param {MessageInquiryDto} messageInquiryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApi
     */
    public create(messageInquiryDto: MessageInquiryDto, options?: RawAxiosRequestConfig) {
        return MessageEndpointApiFp(this.configuration).create(messageInquiryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get detailed information about a specific message
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApi
     */
    public find(id: number, options?: RawAxiosRequestConfig) {
        return MessageEndpointApiFp(this.configuration).find(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of messages without details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageEndpointApi
     */
    public findAll(options?: RawAxiosRequestConfig) {
        return MessageEndpointApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderEndpointApi - axios parameter creator
 * @export
 */
export const OrderEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findById', 'id', id)
            const localVarPath = `/api/v1/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderEndpointApi - functional programming interface
 * @export
 */
export const OrderEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderEndpointApi.findById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderEndpointApi - factory interface
 * @export
 */
export const OrderEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(id: number, options?: any): AxiosPromise<OrderDetailsResponse> {
            return localVarFp.findById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderEndpointApi - interface
 * @export
 * @interface OrderEndpointApi
 */
export interface OrderEndpointApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApiInterface
     */
    findById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<OrderDetailsResponse>;

}

/**
 * OrderEndpointApi - object-oriented interface
 * @export
 * @class OrderEndpointApi
 * @extends {BaseAPI}
 */
export class OrderEndpointApi extends BaseAPI implements OrderEndpointApiInterface {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEndpointApi
     */
    public findById(id: number, options?: RawAxiosRequestConfig) {
        return OrderEndpointApiFp(this.configuration).findById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserEndpointApi - axios parameter creator
 * @export
 */
export const UserEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userCreateRequest: UserCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateRequest' is not null or undefined
            assertParamExists('register', 'userCreateRequest', userCreateRequest)
            const localVarPath = `/api/v1/users/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserEndpointApi - functional programming interface
 * @export
 */
export const UserEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserEndpointApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userCreateRequest: UserCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserEndpointApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserEndpointApi - factory interface
 * @export
 */
export const UserEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserEndpointApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<ApplicationUserResponse> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userCreateRequest: UserCreateRequest, options?: any): AxiosPromise<object> {
            return localVarFp.register(userCreateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserEndpointApi - interface
 * @export
 * @interface UserEndpointApi
 */
export interface UserEndpointApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointApiInterface
     */
    getUser(options?: RawAxiosRequestConfig): AxiosPromise<ApplicationUserResponse>;

    /**
     * 
     * @param {UserCreateRequest} userCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointApiInterface
     */
    register(userCreateRequest: UserCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;

}

/**
 * UserEndpointApi - object-oriented interface
 * @export
 * @class UserEndpointApi
 * @extends {BaseAPI}
 */
export class UserEndpointApi extends BaseAPI implements UserEndpointApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserEndpointApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreateRequest} userCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserEndpointApi
     */
    public register(userCreateRequest: UserCreateRequest, options?: RawAxiosRequestConfig) {
        return UserEndpointApiFp(this.configuration).register(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



